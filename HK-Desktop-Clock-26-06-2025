#include <U8g2lib.h>
#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>
#include <ESP8266HTTPClient.h>
#include <WiFiClient.h>
#include <ArduinoJson.h>

// **Wi-Fi Credentials**
const char* ssid = "CoatsEmployee";
const char* password = "Coats@1234";

// **Soft AP Configuration**
const char* ap_ssid = "HK_DTWidget";
const char* ap_password = "00000000";

// **OLED Display (128x64, I2C)**
#define OLED_RESET U8X8_PIN_NONE
#define OLED_SDA 14  // D6
#define OLED_SCL 12  // D5
U8G2_SSD1306_128X64_NONAME_F_HW_I2C u8g2(U8G2_R0, OLED_RESET, OLED_SCL, OLED_SDA);

// **NTP Time Sync (UTC+5 for Karachi)**
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 18000, 60000); // UTC+5 offset

// **API Keys and URLs**
const char* weatherApiKey = "YOUR_OPENWEATHERMAP_API_KEY"; // Replace with your API key
const char* weatherUrl = "http://api.openweathermap.org/data/2.5/weather?q=Karachi,PK&units=metric&appid=";
const char* locationUrl = "http://ip-api.com/json";

// **Global Variables for Data**
String city = "Karachi, PK";
float temperature = -999.0; // Invalid initial value
String dateStr = "Unknown";

// **Function to Fetch Weather Data**
bool fetchWeatherData() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("No WiFi for weather fetch");
    return false;
  }

  WiFiClient client;
  HTTPClient http;
  String url = String(weatherUrl) + weatherApiKey;
  Serial.print("Fetching weather from: "); Serial.println(url);
  http.begin(client, url);
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.println("Weather API Response: " + payload);
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, payload);
    if (!error) {
      temperature = doc["main"]["temp"].as<float>();
      Serial.print("Fetched Temp: "); Serial.println(temperature);
      http.end();
      return temperature > -50 && temperature < 60; // Validate range
    } else {
      Serial.println("JSON parse error: " + String(error.c_str()));
    }
  } else {
    Serial.print("Weather API HTTP Error: "); Serial.println(httpCode);
  }
  http.end();
  return false;
}

// **Function to Fetch Location Data**
bool fetchLocationData() {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("No WiFi for location fetch");
    return false;
  }

  WiFiClient client;
  HTTPClient http;
  http.begin(client, locationUrl);
  int httpCode = http.GET();

  if (httpCode == HTTP_CODE_OK) {
    String payload = http.getString();
    Serial.println("Location API Response: " + payload);
    DynamicJsonDocument doc(512);
    DeserializationError error = deserializeJson(doc, payload);
    if (!error) {
      String cityName = doc["city"];
      String countryCode = doc["countryCode"];
      city = cityName + ", " + countryCode;
      Serial.println("Location fetched: " + city);
      http.end();
      return true;
    } else {
      Serial.println("JSON parse error: " + String(error.c_str()));
    }
  } else {
    Serial.print("Location API HTTP Error: "); Serial.println(httpCode);
  }
  http.end();
  return false;
}

// **Function to Format Date (Thurs, 26 June, 25)**
String getFormattedDate() {
  timeClient.update();
  time_t epochTime = timeClient.getEpochTime();
  struct tm *ptm = gmtime((time_t *)&epochTime);
  
  char dateBuffer[20];
  strftime(dateBuffer, sizeof(dateBuffer), "%a, %d %B, %y", ptm);
  return String(dateBuffer);
}

// **Function to Display OLED Widget**
void displayWidget(bool connected) {
  u8g2.clearBuffer();

  // **1️⃣ Yellow Box for Time**
  u8g2.drawBox(0, 0, 128, 18);

  // **2️⃣ Centered, Bold Time (Inside Yellow Box)**
  timeClient.update();
  char timeBuffer[15];
  snprintf(timeBuffer, sizeof(timeBuffer), "%02d:%02d:%02d", timeClient.getHours(), timeClient.getMinutes(), timeClient.getSeconds());
  u8g2.setDrawColor(0);  // Black Text on Yellow
  u8g2.setFont(u8g2_font_logisoso16_tf);  // Bigger, Bold Font
  u8g2.drawStr(22, 15, timeBuffer); // Centered
  u8g2.setDrawColor(1); // Reset to Normal Text  

  // **3️⃣ Date (Thurs, 26 June, 25)**
  u8g2.setFont(u8g2_font_6x10_tf);
  u8g2.drawStr(5, 32, dateStr.c_str());

  // **4️⃣ Temperature (Internet Only)**
  char tempBuffer[20];
  if (connected && temperature > -50 && temperature < 60) {
    snprintf(tempBuffer, sizeof(tempBuffer), "Temp: %.1f°C", temperature);
  } else {
    snprintf(tempBuffer, sizeof(tempBuffer), "Temp: N/A");
  }
  u8g2.drawStr(5, 46, tempBuffer);

  // **5️⃣ Location**
  u8g2.drawStr(5, 60, city.c_str());

  // **Display 'DC!' if disconnected**
  if (!connected) {
    u8g2.setFont(u8g2_font_6x10_tf);
    u8g2.drawStr(105, 60, "DC!");
  }

  u8g2.sendBuffer();
}

void setup() {
  Serial.begin(115200);
  u8g2.begin();

  // **Display Connecting Message**
  u8g2.clearBuffer();
  u8g2.setFont(u8g2_font_6x10_tf);
  u8g2.drawStr(10, 30, "Connecting WiFi...");
  u8g2.sendBuffer();

  // **Try to Connect to WiFi for 10 seconds**
  WiFi.begin(ssid, password);
  unsigned long startAttemptTime = millis();
  bool connected = false;
  while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
    delay(500);
    Serial.print(".");
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi Connected!");
    connected = true;
    // Fetch initial data
    if (fetchLocationData()) {
      Serial.println("Location fetched: " + city);
    }
    if (fetchWeatherData()) {
      Serial.println("Weather fetched: " + String(temperature) + "°C");
    }
    dateStr = getFormattedDate();
  } else {
    Serial.println("\nWiFi Failed, Starting Soft AP...");
    WiFi.softAP(ap_ssid, ap_password);
    Serial.print("AP IP Address: "); Serial.println(WiFi.softAPIP());
    // Display AP info on OLED for 30 seconds
    for (int i = 0; i < 30; i++) {
      u8g2.clearBuffer();
      u8g2.setFont(u8g2_font_6x10_tf);
      u8g2.drawStr(5, 15, "AP SSID:");
      u8g2.drawStr(5, 30, ap_ssid);
      u8g2.drawStr(5, 45, "Password:");
      u8g2.drawStr(5, 60, ap_password);
      u8g2.sendBuffer();
      delay(1000);
    }
  }

  // **Start NTP Client**
  timeClient.begin();

  // **Display Widget**
  displayWidget(connected);
}

void loop() {
  static unsigned long lastUpdate = 0;
  bool connected = (WiFi.status() == WL_CONNECTED);

  // **Fetch weather and location every 10 minutes**
  if (connected && millis() - lastUpdate > 600000) {
    fetchWeatherData();
    fetchLocationData();
    dateStr = getFormattedDate();
    lastUpdate = millis();
  }

  // **Display Widget Every Second**
  displayWidget(connected);
  delay(1000);
}
